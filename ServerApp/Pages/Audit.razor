@page "/audit"
@using Microsoft.AspNetCore.Authorization
@using StrawberryShake
@using System.Security.Claims

@attribute [Authorize(Policy = "CanViewAnySecurityEvents")]
@inject IServerClient GraphQLClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Security Audit Dashboard</PageTitle>

@if (!isReady)
{
    
}
else
{
    <h3>Security Audit Dashboard</h3>

    <div class="row">
        <!-- Left Column: Auth Events -->
        <div class="col-md-6">
            <h5>Auth Events</h5>
            @if (!authorizedAuthEvents)
            {
                <p class="text-muted">Insufficient access. Contact your admin.</p>
            }
            else if (authEvents is null || !authEvents.Any())
            {
                <p class="text-muted">No authentication events recorded yet.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Timestamp</th>
                            <th>User</th>
                            <th>Event</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ev in authEvents)
                        {
                            <tr>
                                <td>@ev.OccurredUtc.ToLocalTime()</td>
                                <td>
                                    @if (ev.AffectedUser is not null)
                                    {
                                        @ev.AffectedUser.Email
                                    }
                                    else
                                    {
                                        <em>—</em>
                                    }
                                </td>
                                <td>@ev.EventType</td>
                                <td>@ev.Details</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>

        <!-- Right Column: Role Changes -->
        <div class="col-md-6">
            <h5>Role Changes</h5>
            @if (!authorizedRoleChanges)
            {
                <p class="text-muted">Insufficient access. Contact your admin.</p>
            }
            else if (roleEvents is null || !roleEvents.Any())
            {
                <p class="text-muted">No role changes recorded yet.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Timestamp</th>
                            <th>Actor → Target</th>
                            <th>Event</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ev in roleEvents)
                        {
                            <tr>
                                <td>@ev.OccurredUtc.ToLocalTime()</td>
                                <td>
                                    @if (ev.AuthorUser is not null && ev.AffectedUser is not null)
                                    {
                                        @($"{ev.AuthorUser.Email} → {ev.AffectedUser.Email}")
                                    }
                                    else
                                    {
                                        <em>—</em>
                                    }
                                </td>
                                <td>@ev.EventType</td>
                                <td>@ev.Details</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {

    //isReady ensures user has correct claims on first user login
    private bool isReady = false;
    private List<IGetSecurityEvents_SecurityEvents>? authEvents;
    private List<IGetSecurityEvents_SecurityEvents>? roleEvents;
    private bool authorizedRoleChanges;
    
    private bool authorizedAuthEvents;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var externalId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        var result = await GraphQLClient.GetUserClaims.ExecuteAsync(externalId!);
        authorizedRoleChanges = result.Data?.UserClaims.Any(c => c.Value == "Audit.RoleChanges") ?? false;

        authorizedAuthEvents = result.Data?.UserClaims.Any(c => c.Value == "Audit.ViewAuthEvents") ?? false;

        var eventsResult = await GraphQLClient.GetSecurityEvents.ExecuteAsync();
        var events = eventsResult.Data?.SecurityEvents?.ToList() ?? new();

        authEvents = events
            .Where(e => e.EventType is "LoginSuccess" or "LogoutSuccess")
            .OrderByDescending(e => e.OccurredUtc)
            .ToList();

        roleEvents = events
            .Where(e => e.EventType == "RoleAssigned")
            .OrderByDescending(e => e.OccurredUtc)
            .ToList();

        isReady = true;
    }
}
