@page "/audit"
@using Microsoft.AspNetCore.Authorization
@using StrawberryShake
@using System.Security.Claims

@attribute [Authorize(Policy = "CanViewAnySecurityEvents")]
@inject IServerClient GraphQLClient
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Security Audit Dashboard</PageTitle>

@if (!isReady)
{
    <p>Loading events...</p>
}
else
{
    <h3>Security Audit Dashboard</h3>

    <div class="row">
        <div class="col-md-6">
            <h5>Auth Events</h5>
            @if (authEvents is null || !authEvents.Any())
            {
                <p class="text-muted">Insufficient access. Contact your admin.</p>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var ev in authEvents)
                    {
                        <li class="list-group-item">
                            <strong>@ev.OccurredUtc.ToLocalTime():</strong>
                            @ev.AffectedUser.Email â†’ @ev.EventType
                            <br />
                            <small>@ev.Details</small>
                        </li>
                    }
                </ul>
            }
        </div>

        <div class="col-md-6">
            <h5>Role Changes</h5>
            @if (roleEvents is null || !roleEvents.Any())
            {
                <p class="text-muted">Insufficient access. Contact your admin.</p>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var ev in roleEvents)
                    {
                        <li class="list-group-item">
                            <strong>@ev.OccurredUtc.ToLocalTime():</strong>
                            AuthUser: @ev.AuthorUser.Email Changed @ev.AffectedUser.Email
                            <br />
                            <small>@ev.Details</small>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
}

@code {
    private bool isReady = false;
    private List<IGetSecurityEvents_SecurityEvents>? authEvents;
    private List<IGetSecurityEvents_SecurityEvents>? roleEvents;

    protected override async Task OnInitializedAsync()
    {
        // Call GetSecurityEvents without passing claims
        var eventsResult = await GraphQLClient.GetSecurityEvents.ExecuteAsync();
        var events = eventsResult.Data?.SecurityEvents?.ToList() ?? new();

        // Split events by type for UI
        authEvents = events
            .Where(e => e.EventType is "LoginSuccess" or "LogoutSuccess")
            .OrderByDescending(e => e.OccurredUtc)
            .ToList();

        roleEvents = events
            .Where(e => e.EventType == "RoleAssigned")
            .OrderByDescending(e => e.OccurredUtc)
            .ToList();

        isReady = true;
    }
}
