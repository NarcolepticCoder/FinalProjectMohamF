// <auto-generated/>
#nullable enable annotations
#nullable disable warnings

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public static partial class ServerClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::ServerApp.State.ServerClientStoreAccessor> AddServerClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::ServerApp.State.ServerClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.GetRolesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.AssignRoleMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.GetUsersQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.GetSecurityEventsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.AuditLogoutMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.AuditLoginMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.GetUserClaimsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.ServerClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.IServerClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::ServerApp.State.ServerClientStoreAccessor>("ServerClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ServerClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, global::ServerApp.GetRoles_Roles_Roles>, global::ServerApp.State.GetRoles_Roles_RolesFromRolesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, global::ServerApp.AssignRole_AssignUserRole_AuthorUser_User>, global::ServerApp.State.AssignRole_AssignUserRole_AuthorUser_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, global::ServerApp.AssignRole_AssignUserRole_AffectedUser_User>, global::ServerApp.State.AssignRole_AssignUserRole_AffectedUser_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, global::ServerApp.AssignRole_AssignUserRole_AuthorUser_Role_Roles>, global::ServerApp.State.AssignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, global::ServerApp.AssignRole_AssignUserRole_AffectedUser_Role_Roles>, global::ServerApp.State.AssignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, global::ServerApp.GetUsers_Users_User>, global::ServerApp.State.GetUsers_Users_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, global::ServerApp.GetUsers_Users_Role_Roles>, global::ServerApp.State.GetUsers_Users_Role_RolesFromRolesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.SecurityEventsEntity, global::ServerApp.GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents>, global::ServerApp.State.GetSecurityEvents_SecurityEvents_Nodes_SecurityEventsFromSecurityEventsEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, global::ServerApp.GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User>, global::ServerApp.State.GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, global::ServerApp.GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User>, global::ServerApp.State.GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, global::ServerApp.GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles>, global::ServerApp.State.GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, global::ServerApp.GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles>, global::ServerApp.State.GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalDateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LocalTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::ServerApp.AuditDtoInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetRolesResult>, global::ServerApp.State.GetRolesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetRolesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.IGetRolesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IGetRolesResult>, global::ServerApp.State.GetRolesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ServerApp.IGetRolesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ServerApp.IGetRolesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IGetRolesResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.GetRolesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.IGetRolesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.GetRolesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAssignRoleResult>, global::ServerApp.State.AssignRoleResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAssignRoleResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.IAssignRoleMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IAssignRoleResult>, global::ServerApp.State.AssignRoleBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ServerApp.IAssignRoleResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ServerApp.IAssignRoleResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IAssignRoleResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.AssignRoleMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.IAssignRoleMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.AssignRoleMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetUsersResult>, global::ServerApp.State.GetUsersResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetUsersResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.IGetUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IGetUsersResult>, global::ServerApp.State.GetUsersBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ServerApp.IGetUsersResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ServerApp.IGetUsersResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IGetUsersResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.GetUsersQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.IGetUsersQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.GetUsersQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetSecurityEventsResult>, global::ServerApp.State.GetSecurityEventsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetSecurityEventsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.IGetSecurityEventsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IGetSecurityEventsResult>, global::ServerApp.State.GetSecurityEventsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ServerApp.IGetSecurityEventsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ServerApp.IGetSecurityEventsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IGetSecurityEventsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.GetSecurityEventsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.IGetSecurityEventsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.GetSecurityEventsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAuditLogoutResult>, global::ServerApp.State.AuditLogoutResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAuditLogoutResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.IAuditLogoutMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IAuditLogoutResult>, global::ServerApp.State.AuditLogoutBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ServerApp.IAuditLogoutResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ServerApp.IAuditLogoutResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IAuditLogoutResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.AuditLogoutMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.IAuditLogoutMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.AuditLogoutMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAuditLoginResult>, global::ServerApp.State.AuditLoginResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAuditLoginResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.IAuditLoginMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IAuditLoginResult>, global::ServerApp.State.AuditLoginBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ServerApp.IAuditLoginResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ServerApp.IAuditLoginResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IAuditLoginResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.AuditLoginMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.IAuditLoginMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.AuditLoginMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetUserClaimsResult>, global::ServerApp.State.GetUserClaimsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetUserClaimsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.IGetUserClaimsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IGetUserClaimsResult>, global::ServerApp.State.GetUserClaimsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ServerApp.IGetUserClaimsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ServerApp.IGetUserClaimsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ServerApp.IGetUserClaimsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.GetUserClaimsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.IGetUserClaimsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.GetUserClaimsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::ServerApp.State.ServerClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.ServerClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ServerApp.IServerClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ServerApp.ServerClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace ServerApp
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetRolesResult : global::System.IEquatable<GetRolesResult>, IGetRolesResult
    {
        public GetRolesResult(global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetRoles_Roles> roles)
        {
            Roles = roles;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetRoles_Roles> Roles { get; }

        public virtual global::System.Boolean Equals(GetRolesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Roles, other.Roles));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRolesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Roles_elm in Roles)
                {
                    hash ^= 397 * Roles_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetRoles_Roles_Roles : global::System.IEquatable<GetRoles_Roles_Roles>, IGetRoles_Roles_Roles
    {
        public GetRoles_Roles_Roles(global::System.Guid id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetRoles_Roles_Roles? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRoles_Roles_Roles)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetRolesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetRoles_Roles> Roles { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetRoles_Roles
    {
        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetRoles_Roles_Roles : IGetRoles_Roles
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRoleResult : global::System.IEquatable<AssignRoleResult>, IAssignRoleResult
    {
        public AssignRoleResult(global::ServerApp.IAssignRole_AssignUserRole assignUserRole)
        {
            AssignUserRole = assignUserRole;
        }

        public global::ServerApp.IAssignRole_AssignUserRole AssignUserRole { get; }

        public virtual global::System.Boolean Equals(AssignRoleResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AssignUserRole.Equals(other.AssignUserRole));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AssignRoleResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AssignUserRole.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRole_AssignUserRole_AssignRoleResult : global::System.IEquatable<AssignRole_AssignUserRole_AssignRoleResult>, IAssignRole_AssignUserRole_AssignRoleResult
    {
        public AssignRole_AssignUserRole_AssignRoleResult(global::System.String fromRole, global::System.String toRole, global::ServerApp.IAssignRole_AssignUserRole_AuthorUser authorUser, global::ServerApp.IAssignRole_AssignUserRole_AffectedUser affectedUser)
        {
            FromRole = fromRole;
            ToRole = toRole;
            AuthorUser = authorUser;
            AffectedUser = affectedUser;
        }

        public global::System.String FromRole { get; }
        public global::System.String ToRole { get; }
        public global::ServerApp.IAssignRole_AssignUserRole_AuthorUser AuthorUser { get; }
        public global::ServerApp.IAssignRole_AssignUserRole_AffectedUser AffectedUser { get; }

        public virtual global::System.Boolean Equals(AssignRole_AssignUserRole_AssignRoleResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (FromRole.Equals(other.FromRole)) && ToRole.Equals(other.ToRole) && AuthorUser.Equals(other.AuthorUser) && AffectedUser.Equals(other.AffectedUser);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AssignRole_AssignUserRole_AssignRoleResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * FromRole.GetHashCode();
                hash ^= 397 * ToRole.GetHashCode();
                hash ^= 397 * AuthorUser.GetHashCode();
                hash ^= 397 * AffectedUser.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRole_AssignUserRole_AuthorUser_User : global::System.IEquatable<AssignRole_AssignUserRole_AuthorUser_User>, IAssignRole_AssignUserRole_AuthorUser_User
    {
        public AssignRole_AssignUserRole_AuthorUser_User(global::System.Guid id, global::System.String email, global::ServerApp.IAssignRole_AssignUserRole_AuthorUser_Role role)
        {
            Id = id;
            Email = email;
            Role = role;
        }

        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::ServerApp.IAssignRole_AssignUserRole_AuthorUser_Role Role { get; }

        public virtual global::System.Boolean Equals(AssignRole_AssignUserRole_AuthorUser_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Email.Equals(other.Email) && Role.Equals(other.Role);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AssignRole_AssignUserRole_AuthorUser_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * Role.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRole_AssignUserRole_AffectedUser_User : global::System.IEquatable<AssignRole_AssignUserRole_AffectedUser_User>, IAssignRole_AssignUserRole_AffectedUser_User
    {
        public AssignRole_AssignUserRole_AffectedUser_User(global::System.Guid id, global::System.String email, global::ServerApp.IAssignRole_AssignUserRole_AffectedUser_Role role)
        {
            Id = id;
            Email = email;
            Role = role;
        }

        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::ServerApp.IAssignRole_AssignUserRole_AffectedUser_Role Role { get; }

        public virtual global::System.Boolean Equals(AssignRole_AssignUserRole_AffectedUser_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Email.Equals(other.Email) && Role.Equals(other.Role);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AssignRole_AssignUserRole_AffectedUser_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * Role.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRole_AssignUserRole_AuthorUser_Role_Roles : global::System.IEquatable<AssignRole_AssignUserRole_AuthorUser_Role_Roles>, IAssignRole_AssignUserRole_AuthorUser_Role_Roles
    {
        public AssignRole_AssignUserRole_AuthorUser_Role_Roles(global::System.Guid id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(AssignRole_AssignUserRole_AuthorUser_Role_Roles? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AssignRole_AssignUserRole_AuthorUser_Role_Roles)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRole_AssignUserRole_AffectedUser_Role_Roles : global::System.IEquatable<AssignRole_AssignUserRole_AffectedUser_Role_Roles>, IAssignRole_AssignUserRole_AffectedUser_Role_Roles
    {
        public AssignRole_AssignUserRole_AffectedUser_Role_Roles(global::System.Guid id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(AssignRole_AssignUserRole_AffectedUser_Role_Roles? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AssignRole_AssignUserRole_AffectedUser_Role_Roles)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRoleResult
    {
        public global::ServerApp.IAssignRole_AssignUserRole AssignUserRole { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRole_AssignUserRole
    {
        public global::System.String FromRole { get; }
        public global::System.String ToRole { get; }
        public global::ServerApp.IAssignRole_AssignUserRole_AuthorUser AuthorUser { get; }
        public global::ServerApp.IAssignRole_AssignUserRole_AffectedUser AffectedUser { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRole_AssignUserRole_AssignRoleResult : IAssignRole_AssignUserRole
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRole_AssignUserRole_AuthorUser
    {
        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::ServerApp.IAssignRole_AssignUserRole_AuthorUser_Role Role { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRole_AssignUserRole_AuthorUser_User : IAssignRole_AssignUserRole_AuthorUser
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRole_AssignUserRole_AffectedUser
    {
        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::ServerApp.IAssignRole_AssignUserRole_AffectedUser_Role Role { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRole_AssignUserRole_AffectedUser_User : IAssignRole_AssignUserRole_AffectedUser
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRole_AssignUserRole_AuthorUser_Role
    {
        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRole_AssignUserRole_AuthorUser_Role_Roles : IAssignRole_AssignUserRole_AuthorUser_Role
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRole_AssignUserRole_AffectedUser_Role
    {
        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRole_AssignUserRole_AffectedUser_Role_Roles : IAssignRole_AssignUserRole_AffectedUser_Role
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUsersResult : global::System.IEquatable<GetUsersResult>, IGetUsersResult
    {
        public GetUsersResult(global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetUsers_Users> users)
        {
            Users = users;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetUsers_Users> Users { get; }

        public virtual global::System.Boolean Equals(GetUsersResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Users, other.Users));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsersResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Users_elm in Users)
                {
                    hash ^= 397 * Users_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUsers_Users_User : global::System.IEquatable<GetUsers_Users_User>, IGetUsers_Users_User
    {
        public GetUsers_Users_User(global::System.Guid id, global::System.String email, global::System.String externalId, global::ServerApp.IGetUsers_Users_Role role)
        {
            Id = id;
            Email = email;
            ExternalId = externalId;
            Role = role;
        }

        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::System.String ExternalId { get; }
        public global::ServerApp.IGetUsers_Users_Role Role { get; }

        public virtual global::System.Boolean Equals(GetUsers_Users_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Email.Equals(other.Email) && ExternalId.Equals(other.ExternalId) && Role.Equals(other.Role);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsers_Users_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * ExternalId.GetHashCode();
                hash ^= 397 * Role.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUsers_Users_Role_Roles : global::System.IEquatable<GetUsers_Users_Role_Roles>, IGetUsers_Users_Role_Roles
    {
        public GetUsers_Users_Role_Roles(global::System.Guid id, global::System.String name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetUsers_Users_Role_Roles? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUsers_Users_Role_Roles)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetUsersResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetUsers_Users> Users { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetUsers_Users
    {
        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::System.String ExternalId { get; }
        public global::ServerApp.IGetUsers_Users_Role Role { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetUsers_Users_User : IGetUsers_Users
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetUsers_Users_Role
    {
        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetUsers_Users_Role_Roles : IGetUsers_Users_Role
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEventsResult : global::System.IEquatable<GetSecurityEventsResult>, IGetSecurityEventsResult
    {
        public GetSecurityEventsResult(global::ServerApp.IGetSecurityEvents_SecurityEvents? securityEvents)
        {
            SecurityEvents = securityEvents;
        }

        public global::ServerApp.IGetSecurityEvents_SecurityEvents? SecurityEvents { get; }

        public virtual global::System.Boolean Equals(GetSecurityEventsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SecurityEvents is null && other.SecurityEvents is null) || SecurityEvents != null && SecurityEvents.Equals(other.SecurityEvents)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSecurityEventsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SecurityEvents != null)
                {
                    hash ^= 397 * SecurityEvents.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_SecurityEventsConnection : global::System.IEquatable<GetSecurityEvents_SecurityEvents_SecurityEventsConnection>, IGetSecurityEvents_SecurityEvents_SecurityEventsConnection
    {
        public GetSecurityEvents_SecurityEvents_SecurityEventsConnection(global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetSecurityEvents_SecurityEvents_SecurityEventsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSecurityEvents_SecurityEvents_SecurityEventsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents : global::System.IEquatable<GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents>, IGetSecurityEvents_SecurityEvents_Nodes_SecurityEvents
    {
        public GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents(global::System.Guid id, global::System.String eventType, global::System.DateTimeOffset occurredUtc, global::System.String? details, global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser authorUser, global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser affectedUser)
        {
            Id = id;
            EventType = eventType;
            OccurredUtc = occurredUtc;
            Details = details;
            AuthorUser = authorUser;
            AffectedUser = affectedUser;
        }

        public global::System.Guid Id { get; }
        public global::System.String EventType { get; }
        public global::System.DateTimeOffset OccurredUtc { get; }
        public global::System.String? Details { get; }
        public global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser AuthorUser { get; }
        public global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser AffectedUser { get; }

        public virtual global::System.Boolean Equals(GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && EventType.Equals(other.EventType) && OccurredUtc.Equals(other.OccurredUtc) && ((Details is null && other.Details is null) || Details != null && Details.Equals(other.Details)) && AuthorUser.Equals(other.AuthorUser) && AffectedUser.Equals(other.AffectedUser);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * EventType.GetHashCode();
                hash ^= 397 * OccurredUtc.GetHashCode();
                if (Details != null)
                {
                    hash ^= 397 * Details.GetHashCode();
                }

                hash ^= 397 * AuthorUser.GetHashCode();
                hash ^= 397 * AffectedUser.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User : global::System.IEquatable<GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User>, IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User
    {
        public GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User(global::System.Guid id, global::System.String email, global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role role)
        {
            Id = id;
            Email = email;
            Role = role;
        }

        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role Role { get; }

        public virtual global::System.Boolean Equals(GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Email.Equals(other.Email) && Role.Equals(other.Role);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * Role.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User : global::System.IEquatable<GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User>, IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User
    {
        public GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User(global::System.Guid id, global::System.String email, global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role role)
        {
            Id = id;
            Email = email;
            Role = role;
        }

        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role Role { get; }

        public virtual global::System.Boolean Equals(GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Email.Equals(other.Email) && Role.Equals(other.Role);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * Role.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles : global::System.IEquatable<GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles>, IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles
    {
        public GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles : global::System.IEquatable<GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles>, IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles
    {
        public GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEventsResult
    {
        public global::ServerApp.IGetSecurityEvents_SecurityEvents? SecurityEvents { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_SecurityEventsConnection : IGetSecurityEvents_SecurityEvents
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_Nodes
    {
        public global::System.Guid Id { get; }
        public global::System.String EventType { get; }
        public global::System.DateTimeOffset OccurredUtc { get; }
        public global::System.String? Details { get; }
        public global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser AuthorUser { get; }
        public global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser AffectedUser { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_Nodes_SecurityEvents : IGetSecurityEvents_SecurityEvents_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser
    {
        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role Role { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User : IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser
    {
        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role Role { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User : IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles : IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles : IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLogoutResult : global::System.IEquatable<AuditLogoutResult>, IAuditLogoutResult
    {
        public AuditLogoutResult(global::System.String auditLogout)
        {
            AuditLogout = auditLogout;
        }

        public global::System.String AuditLogout { get; }

        public virtual global::System.Boolean Equals(AuditLogoutResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AuditLogout.Equals(other.AuditLogout));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AuditLogoutResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AuditLogout.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAuditLogoutResult
    {
        public global::System.String AuditLogout { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLoginResult : global::System.IEquatable<AuditLoginResult>, IAuditLoginResult
    {
        public AuditLoginResult(global::System.String auditLogin)
        {
            AuditLogin = auditLogin;
        }

        public global::System.String AuditLogin { get; }

        public virtual global::System.Boolean Equals(AuditLoginResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AuditLogin.Equals(other.AuditLogin));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AuditLoginResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AuditLogin.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAuditLoginResult
    {
        public global::System.String AuditLogin { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUserClaimsResult : global::System.IEquatable<GetUserClaimsResult>, IGetUserClaimsResult
    {
        public GetUserClaimsResult(global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetUserClaims_UserClaims> userClaims)
        {
            UserClaims = userClaims;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetUserClaims_UserClaims> UserClaims { get; }

        public virtual global::System.Boolean Equals(GetUserClaimsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(UserClaims, other.UserClaims));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserClaimsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var UserClaims_elm in UserClaims)
                {
                    hash ^= 397 * UserClaims_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUserClaims_UserClaims_ClaimDto : global::System.IEquatable<GetUserClaims_UserClaims_ClaimDto>, IGetUserClaims_UserClaims_ClaimDto
    {
        public GetUserClaims_UserClaims_ClaimDto(global::System.String type, global::System.String @value)
        {
            Type = type;
            Value = @value;
        }

        public global::System.String Type { get; }
        public global::System.String Value { get; }

        public virtual global::System.Boolean Equals(GetUserClaims_UserClaims_ClaimDto? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Type.Equals(other.Type)) && Value.Equals(other.Value);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetUserClaims_UserClaims_ClaimDto)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Type.GetHashCode();
                hash ^= 397 * Value.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetUserClaimsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetUserClaims_UserClaims> UserClaims { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetUserClaims_UserClaims
    {
        public global::System.String Type { get; }
        public global::System.String Value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetUserClaims_UserClaims_ClaimDto : IGetUserClaims_UserClaims
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditDtoInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "AuditDtoInput";

        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::ServerApp.AuditDtoInput;
            var inputInfo = runtimeValue as global::ServerApp.State.IAuditDtoInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("email", FormatEmail(input.Email)));
            }

            if (inputInfo.IsExternalIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("externalId", FormatExternalId(input.ExternalId)));
            }

            if (inputInfo.IsProviderSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("provider", FormatProvider(input.Provider)));
            }

            return fields;
        }

        private global::System.Object? FormatEmail(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatExternalId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatProvider(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditDtoInput : global::ServerApp.State.IAuditDtoInputInfo, global::System.IEquatable<AuditDtoInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AuditDtoInput)obj);
        }

        public virtual global::System.Boolean Equals(AuditDtoInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Email.Equals(other.Email)) && ExternalId.Equals(other.ExternalId) && ((Provider is null && other.Provider is null) || Provider != null && Provider.Equals(other.Provider));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Email.GetHashCode();
                hash ^= 397 * ExternalId.GetHashCode();
                if (Provider != null)
                {
                    hash ^= 397 * Provider.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_email = default !;
        private global::System.Boolean _set_email;
        private global::System.String _value_externalId = default !;
        private global::System.Boolean _set_externalId;
        private global::System.String? _value_provider;
        private global::System.Boolean _set_provider;
        public global::System.String Email
        {
            get => _value_email;
            set
            {
                _set_email = true;
                _value_email = value;
            }
        }

        global::System.Boolean global::ServerApp.State.IAuditDtoInputInfo.IsEmailSet => _set_email;

        public global::System.String ExternalId
        {
            get => _value_externalId;
            set
            {
                _set_externalId = true;
                _value_externalId = value;
            }
        }

        global::System.Boolean global::ServerApp.State.IAuditDtoInputInfo.IsExternalIdSet => _set_externalId;

        public global::System.String? Provider
        {
            get => _value_provider;
            set
            {
                _set_provider = true;
                _value_provider = value;
            }
        }

        global::System.Boolean global::ServerApp.State.IAuditDtoInputInfo.IsProviderSet => _set_provider;
    }

    /// <summary>
    /// Represents the operation service of the GetRoles GraphQL operation
    /// <code>
    /// query GetRoles {
    ///   roles {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Roles {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetRolesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetRolesQueryDocument()
        {
        }

        public static GetRolesQueryDocument Instance { get; } = new GetRolesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "420762bc3a158213174973d748e01c67");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRoles GraphQL operation
    /// <code>
    /// query GetRoles {
    ///   roles {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Roles {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetRolesQuery : global::ServerApp.IGetRolesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetRolesResult> _operationExecutor;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetRolesQuery(global::StrawberryShake.IOperationExecutor<IGetRolesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        private GetRolesQuery(global::StrawberryShake.IOperationExecutor<IGetRolesResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetRolesResult);

        public global::ServerApp.IGetRolesQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ServerApp.GetRolesQuery(_operationExecutor, _configure.Add(configure));
        }

        public global::ServerApp.IGetRolesQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ServerApp.IGetRolesQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRolesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRolesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetRolesQueryDocument.Instance.Hash.Value, name: "GetRoles", document: GetRolesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRoles GraphQL operation
    /// <code>
    /// query GetRoles {
    ///   roles {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Roles {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetRolesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::ServerApp.IGetRolesQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ServerApp.IGetRolesQuery WithRequestUri(global::System.Uri requestUri);
        global::ServerApp.IGetRolesQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRolesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRolesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AssignRole GraphQL operation
    /// <code>
    /// mutation AssignRole($userId: UUID!, $roleId: UUID!, $authorUserId: UUID!) {
    ///   assignUserRole(userId: $userId, roleId: $roleId, authorUserId: $authorUserId) {
    ///     __typename
    ///     fromRole
    ///     toRole
    ///     authorUser {
    ///       __typename
    ///       id
    ///       email
    ///       role {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Roles {
    ///           id
    ///         }
    ///       }
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     affectedUser {
    ///       __typename
    ///       id
    ///       email
    ///       role {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Roles {
    ///           id
    ///         }
    ///       }
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRoleMutationDocument : global::StrawberryShake.IDocument
    {
        private AssignRoleMutationDocument()
        {
        }

        public static AssignRoleMutationDocument Instance { get; } = new AssignRoleMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x41,
            0x73,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x28,
            0x24,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x55,
            0x55,
            0x49,
            0x44,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x55,
            0x55,
            0x49,
            0x44,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x61,
            0x75,
            0x74,
            0x68,
            0x6f,
            0x72,
            0x55,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x55,
            0x55,
            0x49,
            0x44,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x73,
            0x73,
            0x69,
            0x67,
            0x6e,
            0x55,
            0x73,
            0x65,
            0x72,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x28,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x75,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x2c,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x49,
            0x64,
            0x2c,
            0x20,
            0x61,
            0x75,
            0x74,
            0x68,
            0x6f,
            0x72,
            0x55,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x61,
            0x75,
            0x74,
            0x68,
            0x6f,
            0x72,
            0x55,
            0x73,
            0x65,
            0x72,
            0x49,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x66,
            0x72,
            0x6f,
            0x6d,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x20,
            0x74,
            0x6f,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x20,
            0x61,
            0x75,
            0x74,
            0x68,
            0x6f,
            0x72,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x61,
            0x66,
            0x66,
            0x65,
            0x63,
            0x74,
            0x65,
            0x64,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "bad1ad5257966d541fa08efa4f537229");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AssignRole GraphQL operation
    /// <code>
    /// mutation AssignRole($userId: UUID!, $roleId: UUID!, $authorUserId: UUID!) {
    ///   assignUserRole(userId: $userId, roleId: $roleId, authorUserId: $authorUserId) {
    ///     __typename
    ///     fromRole
    ///     toRole
    ///     authorUser {
    ///       __typename
    ///       id
    ///       email
    ///       role {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Roles {
    ///           id
    ///         }
    ///       }
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     affectedUser {
    ///       __typename
    ///       id
    ///       email
    ///       role {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Roles {
    ///           id
    ///         }
    ///       }
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRoleMutation : global::ServerApp.IAssignRoleMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAssignRoleResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public AssignRoleMutation(global::StrawberryShake.IOperationExecutor<IAssignRoleResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        private AssignRoleMutation(global::StrawberryShake.IOperationExecutor<IAssignRoleResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter uUIDFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _uUIDFormatter = uUIDFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAssignRoleResult);

        public global::ServerApp.IAssignRoleMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ServerApp.AssignRoleMutation(_operationExecutor, _configure.Add(configure), _uUIDFormatter);
        }

        public global::ServerApp.IAssignRoleMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ServerApp.IAssignRoleMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAssignRoleResult>> ExecuteAsync(global::System.Guid userId, global::System.Guid roleId, global::System.Guid authorUserId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(userId, roleId, authorUserId);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAssignRoleResult>> Watch(global::System.Guid userId, global::System.Guid roleId, global::System.Guid authorUserId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(userId, roleId, authorUserId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid userId, global::System.Guid roleId, global::System.Guid authorUserId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("userId", FormatUserId(userId));
            variables.Add("roleId", FormatRoleId(roleId));
            variables.Add("authorUserId", FormatAuthorUserId(authorUserId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AssignRoleMutationDocument.Instance.Hash.Value, name: "AssignRole", document: AssignRoleMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatUserId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        private global::System.Object? FormatRoleId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        private global::System.Object? FormatAuthorUserId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AssignRole GraphQL operation
    /// <code>
    /// mutation AssignRole($userId: UUID!, $roleId: UUID!, $authorUserId: UUID!) {
    ///   assignUserRole(userId: $userId, roleId: $roleId, authorUserId: $authorUserId) {
    ///     __typename
    ///     fromRole
    ///     toRole
    ///     authorUser {
    ///       __typename
    ///       id
    ///       email
    ///       role {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Roles {
    ///           id
    ///         }
    ///       }
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///     affectedUser {
    ///       __typename
    ///       id
    ///       email
    ///       role {
    ///         __typename
    ///         id
    ///         name
    ///         ... on Roles {
    ///           id
    ///         }
    ///       }
    ///       ... on User {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAssignRoleMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::ServerApp.IAssignRoleMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ServerApp.IAssignRoleMutation WithRequestUri(global::System.Uri requestUri);
        global::ServerApp.IAssignRoleMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAssignRoleResult>> ExecuteAsync(global::System.Guid userId, global::System.Guid roleId, global::System.Guid authorUserId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAssignRoleResult>> Watch(global::System.Guid userId, global::System.Guid roleId, global::System.Guid authorUserId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     email
    ///     externalId
    ///     role {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Roles {
    ///         id
    ///       }
    ///     }
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUsersQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUsersQueryDocument()
        {
        }

        public static GetUsersQueryDocument Instance { get; } = new GetUsersQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x55,
            0x73,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x65,
            0x78,
            0x74,
            0x65,
            0x72,
            0x6e,
            0x61,
            0x6c,
            0x49,
            0x64,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "05bbc32f89bb1b48622eb9cbc9042954");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     email
    ///     externalId
    ///     role {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Roles {
    ///         id
    ///       }
    ///     }
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUsersQuery : global::ServerApp.IGetUsersQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUsersResult> _operationExecutor;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetUsersQuery(global::StrawberryShake.IOperationExecutor<IGetUsersResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        private GetUsersQuery(global::StrawberryShake.IOperationExecutor<IGetUsersResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUsersResult);

        public global::ServerApp.IGetUsersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ServerApp.GetUsersQuery(_operationExecutor, _configure.Add(configure));
        }

        public global::ServerApp.IGetUsersQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ServerApp.IGetUsersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUsersQueryDocument.Instance.Hash.Value, name: "GetUsers", document: GetUsersQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUsers GraphQL operation
    /// <code>
    /// query GetUsers {
    ///   users {
    ///     __typename
    ///     id
    ///     email
    ///     externalId
    ///     role {
    ///       __typename
    ///       id
    ///       name
    ///       ... on Roles {
    ///         id
    ///       }
    ///     }
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetUsersQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::ServerApp.IGetUsersQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ServerApp.IGetUsersQuery WithRequestUri(global::System.Uri requestUri);
        global::ServerApp.IGetUsersQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUsersResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUsersResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetSecurityEvents GraphQL operation
    /// <code>
    /// query GetSecurityEvents {
    ///   securityEvents {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       eventType
    ///       occurredUtc
    ///       details
    ///       authorUser {
    ///         __typename
    ///         id
    ///         email
    ///         role {
    ///           __typename
    ///           name
    ///           ... on Roles {
    ///             id
    ///           }
    ///         }
    ///         ... on User {
    ///           id
    ///         }
    ///       }
    ///       affectedUser {
    ///         __typename
    ///         id
    ///         email
    ///         role {
    ///           __typename
    ///           name
    ///           ... on Roles {
    ///             id
    ///           }
    ///         }
    ///         ... on User {
    ///           id
    ///         }
    ///       }
    ///       ... on SecurityEvents {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEventsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSecurityEventsQueryDocument()
        {
        }

        public static GetSecurityEventsQueryDocument Instance { get; } = new GetSecurityEventsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x53,
            0x65,
            0x63,
            0x75,
            0x72,
            0x69,
            0x74,
            0x79,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x73,
            0x65,
            0x63,
            0x75,
            0x72,
            0x69,
            0x74,
            0x79,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x6f,
            0x64,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x65,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x54,
            0x79,
            0x70,
            0x65,
            0x20,
            0x6f,
            0x63,
            0x63,
            0x75,
            0x72,
            0x72,
            0x65,
            0x64,
            0x55,
            0x74,
            0x63,
            0x20,
            0x64,
            0x65,
            0x74,
            0x61,
            0x69,
            0x6c,
            0x73,
            0x20,
            0x61,
            0x75,
            0x74,
            0x68,
            0x6f,
            0x72,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x61,
            0x66,
            0x66,
            0x65,
            0x63,
            0x74,
            0x65,
            0x64,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x65,
            0x6d,
            0x61,
            0x69,
            0x6c,
            0x20,
            0x72,
            0x6f,
            0x6c,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x6f,
            0x6c,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x73,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x53,
            0x65,
            0x63,
            0x75,
            0x72,
            0x69,
            0x74,
            0x79,
            0x45,
            0x76,
            0x65,
            0x6e,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fb420c93f0e3d39a3774321ebda4b5c6");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSecurityEvents GraphQL operation
    /// <code>
    /// query GetSecurityEvents {
    ///   securityEvents {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       eventType
    ///       occurredUtc
    ///       details
    ///       authorUser {
    ///         __typename
    ///         id
    ///         email
    ///         role {
    ///           __typename
    ///           name
    ///           ... on Roles {
    ///             id
    ///           }
    ///         }
    ///         ... on User {
    ///           id
    ///         }
    ///       }
    ///       affectedUser {
    ///         __typename
    ///         id
    ///         email
    ///         role {
    ///           __typename
    ///           name
    ///           ... on Roles {
    ///             id
    ///           }
    ///         }
    ///         ... on User {
    ///           id
    ///         }
    ///       }
    ///       ... on SecurityEvents {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEventsQuery : global::ServerApp.IGetSecurityEventsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSecurityEventsResult> _operationExecutor;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetSecurityEventsQuery(global::StrawberryShake.IOperationExecutor<IGetSecurityEventsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        private GetSecurityEventsQuery(global::StrawberryShake.IOperationExecutor<IGetSecurityEventsResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSecurityEventsResult);

        public global::ServerApp.IGetSecurityEventsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ServerApp.GetSecurityEventsQuery(_operationExecutor, _configure.Add(configure));
        }

        public global::ServerApp.IGetSecurityEventsQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ServerApp.IGetSecurityEventsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSecurityEventsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSecurityEventsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSecurityEventsQueryDocument.Instance.Hash.Value, name: "GetSecurityEvents", document: GetSecurityEventsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSecurityEvents GraphQL operation
    /// <code>
    /// query GetSecurityEvents {
    ///   securityEvents {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       eventType
    ///       occurredUtc
    ///       details
    ///       authorUser {
    ///         __typename
    ///         id
    ///         email
    ///         role {
    ///           __typename
    ///           name
    ///           ... on Roles {
    ///             id
    ///           }
    ///         }
    ///         ... on User {
    ///           id
    ///         }
    ///       }
    ///       affectedUser {
    ///         __typename
    ///         id
    ///         email
    ///         role {
    ///           __typename
    ///           name
    ///           ... on Roles {
    ///             id
    ///           }
    ///         }
    ///         ... on User {
    ///           id
    ///         }
    ///       }
    ///       ... on SecurityEvents {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetSecurityEventsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::ServerApp.IGetSecurityEventsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ServerApp.IGetSecurityEventsQuery WithRequestUri(global::System.Uri requestUri);
        global::ServerApp.IGetSecurityEventsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSecurityEventsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSecurityEventsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AuditLogout GraphQL operation
    /// <code>
    /// mutation AuditLogout($input: AuditDtoInput!) {
    ///   auditLogout(input: $input)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLogoutMutationDocument : global::StrawberryShake.IDocument
    {
        private AuditLogoutMutationDocument()
        {
        }

        public static AuditLogoutMutationDocument Instance { get; } = new AuditLogoutMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x41,
            0x75,
            0x64,
            0x69,
            0x74,
            0x4c,
            0x6f,
            0x67,
            0x6f,
            0x75,
            0x74,
            0x28,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x41,
            0x75,
            0x64,
            0x69,
            0x74,
            0x44,
            0x74,
            0x6f,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x75,
            0x64,
            0x69,
            0x74,
            0x4c,
            0x6f,
            0x67,
            0x6f,
            0x75,
            0x74,
            0x28,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "2e976093d23dc81f01a6f6234eb115e5");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AuditLogout GraphQL operation
    /// <code>
    /// mutation AuditLogout($input: AuditDtoInput!) {
    ///   auditLogout(input: $input)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLogoutMutation : global::ServerApp.IAuditLogoutMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAuditLogoutResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _auditDtoInputFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public AuditLogoutMutation(global::StrawberryShake.IOperationExecutor<IAuditLogoutResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _auditDtoInputFormatter = serializerResolver.GetInputValueFormatter("AuditDtoInput");
        }

        private AuditLogoutMutation(global::StrawberryShake.IOperationExecutor<IAuditLogoutResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter auditDtoInputFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _auditDtoInputFormatter = auditDtoInputFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAuditLogoutResult);

        public global::ServerApp.IAuditLogoutMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ServerApp.AuditLogoutMutation(_operationExecutor, _configure.Add(configure), _auditDtoInputFormatter);
        }

        public global::ServerApp.IAuditLogoutMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ServerApp.IAuditLogoutMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAuditLogoutResult>> ExecuteAsync(global::ServerApp.AuditDtoInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAuditLogoutResult>> Watch(global::ServerApp.AuditDtoInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::ServerApp.AuditDtoInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AuditLogoutMutationDocument.Instance.Hash.Value, name: "AuditLogout", document: AuditLogoutMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::ServerApp.AuditDtoInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _auditDtoInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AuditLogout GraphQL operation
    /// <code>
    /// mutation AuditLogout($input: AuditDtoInput!) {
    ///   auditLogout(input: $input)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAuditLogoutMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::ServerApp.IAuditLogoutMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ServerApp.IAuditLogoutMutation WithRequestUri(global::System.Uri requestUri);
        global::ServerApp.IAuditLogoutMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAuditLogoutResult>> ExecuteAsync(global::ServerApp.AuditDtoInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAuditLogoutResult>> Watch(global::ServerApp.AuditDtoInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AuditLogin GraphQL operation
    /// <code>
    /// mutation AuditLogin($input: AuditDtoInput!) {
    ///   auditLogin(input: $input)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLoginMutationDocument : global::StrawberryShake.IDocument
    {
        private AuditLoginMutationDocument()
        {
        }

        public static AuditLoginMutationDocument Instance { get; } = new AuditLoginMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x6d,
            0x75,
            0x74,
            0x61,
            0x74,
            0x69,
            0x6f,
            0x6e,
            0x20,
            0x41,
            0x75,
            0x64,
            0x69,
            0x74,
            0x4c,
            0x6f,
            0x67,
            0x69,
            0x6e,
            0x28,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x41,
            0x75,
            0x64,
            0x69,
            0x74,
            0x44,
            0x74,
            0x6f,
            0x49,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x61,
            0x75,
            0x64,
            0x69,
            0x74,
            0x4c,
            0x6f,
            0x67,
            0x69,
            0x6e,
            0x28,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x69,
            0x6e,
            0x70,
            0x75,
            0x74,
            0x29,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "824556ccbd66ec5d71f9c4a264769da8");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AuditLogin GraphQL operation
    /// <code>
    /// mutation AuditLogin($input: AuditDtoInput!) {
    ///   auditLogin(input: $input)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLoginMutation : global::ServerApp.IAuditLoginMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAuditLoginResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _auditDtoInputFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public AuditLoginMutation(global::StrawberryShake.IOperationExecutor<IAuditLoginResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _auditDtoInputFormatter = serializerResolver.GetInputValueFormatter("AuditDtoInput");
        }

        private AuditLoginMutation(global::StrawberryShake.IOperationExecutor<IAuditLoginResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter auditDtoInputFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _auditDtoInputFormatter = auditDtoInputFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAuditLoginResult);

        public global::ServerApp.IAuditLoginMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ServerApp.AuditLoginMutation(_operationExecutor, _configure.Add(configure), _auditDtoInputFormatter);
        }

        public global::ServerApp.IAuditLoginMutation WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ServerApp.IAuditLoginMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAuditLoginResult>> ExecuteAsync(global::ServerApp.AuditDtoInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAuditLoginResult>> Watch(global::ServerApp.AuditDtoInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::ServerApp.AuditDtoInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AuditLoginMutationDocument.Instance.Hash.Value, name: "AuditLogin", document: AuditLoginMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::ServerApp.AuditDtoInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _auditDtoInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AuditLogin GraphQL operation
    /// <code>
    /// mutation AuditLogin($input: AuditDtoInput!) {
    ///   auditLogin(input: $input)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IAuditLoginMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::ServerApp.IAuditLoginMutation With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ServerApp.IAuditLoginMutation WithRequestUri(global::System.Uri requestUri);
        global::ServerApp.IAuditLoginMutation WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAuditLoginResult>> ExecuteAsync(global::ServerApp.AuditDtoInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAuditLoginResult>> Watch(global::ServerApp.AuditDtoInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetUserClaims GraphQL operation
    /// <code>
    /// query GetUserClaims($externalId: String!) {
    ///   userClaims(externalId: $externalId) {
    ///     __typename
    ///     type
    ///     value
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUserClaimsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetUserClaimsQueryDocument()
        {
        }

        public static GetUserClaimsQueryDocument Instance { get; } = new GetUserClaimsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x47,
            0x65,
            0x74,
            0x55,
            0x73,
            0x65,
            0x72,
            0x43,
            0x6c,
            0x61,
            0x69,
            0x6d,
            0x73,
            0x28,
            0x24,
            0x65,
            0x78,
            0x74,
            0x65,
            0x72,
            0x6e,
            0x61,
            0x6c,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x53,
            0x74,
            0x72,
            0x69,
            0x6e,
            0x67,
            0x21,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x75,
            0x73,
            0x65,
            0x72,
            0x43,
            0x6c,
            0x61,
            0x69,
            0x6d,
            0x73,
            0x28,
            0x65,
            0x78,
            0x74,
            0x65,
            0x72,
            0x6e,
            0x61,
            0x6c,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x24,
            0x65,
            0x78,
            0x74,
            0x65,
            0x72,
            0x6e,
            0x61,
            0x6c,
            0x49,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x79,
            0x70,
            0x65,
            0x20,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "0f1d1433897734601e83c4d95ae45c73");

        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUserClaims GraphQL operation
    /// <code>
    /// query GetUserClaims($externalId: String!) {
    ///   userClaims(externalId: $externalId) {
    ///     __typename
    ///     type
    ///     value
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUserClaimsQuery : global::ServerApp.IGetUserClaimsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetUserClaimsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> _configure = global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>>.Empty;
        public GetUserClaimsQuery(global::StrawberryShake.IOperationExecutor<IGetUserClaimsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        private GetUserClaimsQuery(global::StrawberryShake.IOperationExecutor<IGetUserClaimsResult> operationExecutor, global::System.Collections.Immutable.ImmutableArray<global::System.Action<global::StrawberryShake.OperationRequest>> configure, global::StrawberryShake.Serialization.IInputValueFormatter @stringFormatter)
        {
            _operationExecutor = operationExecutor;
            _configure = configure;
            _stringFormatter = @stringFormatter;
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetUserClaimsResult);

        public global::ServerApp.IGetUserClaimsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure)
        {
            return new global::ServerApp.GetUserClaimsQuery(_operationExecutor, _configure.Add(configure), _stringFormatter);
        }

        public global::ServerApp.IGetUserClaimsQuery WithRequestUri(global::System.Uri requestUri)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.RequestUri"] = requestUri);
        }

        public global::ServerApp.IGetUserClaimsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient)
        {
            return With(r => r.ContextData["StrawberryShake.Transport.Http.HttpConnection.HttpClient"] = httpClient);
        }

        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUserClaimsResult>> ExecuteAsync(global::System.String externalId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(externalId);
            foreach (var configure in _configure)
            {
                configure(request);
            }

            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUserClaimsResult>> Watch(global::System.String externalId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(externalId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String externalId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("externalId", FormatExternalId(externalId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetUserClaimsQueryDocument.Instance.Hash.Value, name: "GetUserClaims", document: GetUserClaimsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatExternalId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetUserClaims GraphQL operation
    /// <code>
    /// query GetUserClaims($externalId: String!) {
    ///   userClaims(externalId: $externalId) {
    ///     __typename
    ///     type
    ///     value
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IGetUserClaimsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::ServerApp.IGetUserClaimsQuery With(global::System.Action<global::StrawberryShake.OperationRequest> configure);
        global::ServerApp.IGetUserClaimsQuery WithRequestUri(global::System.Uri requestUri);
        global::ServerApp.IGetUserClaimsQuery WithHttpClient(global::System.Net.Http.HttpClient httpClient);
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetUserClaimsResult>> ExecuteAsync(global::System.String externalId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetUserClaimsResult>> Watch(global::System.String externalId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ServerClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class ServerClient : global::ServerApp.IServerClient
    {
        private readonly global::ServerApp.IGetRolesQuery _getRoles;
        private readonly global::ServerApp.IAssignRoleMutation _assignRole;
        private readonly global::ServerApp.IGetUsersQuery _getUsers;
        private readonly global::ServerApp.IGetSecurityEventsQuery _getSecurityEvents;
        private readonly global::ServerApp.IAuditLogoutMutation _auditLogout;
        private readonly global::ServerApp.IAuditLoginMutation _auditLogin;
        private readonly global::ServerApp.IGetUserClaimsQuery _getUserClaims;
        public ServerClient(global::ServerApp.IGetRolesQuery getRoles, global::ServerApp.IAssignRoleMutation assignRole, global::ServerApp.IGetUsersQuery getUsers, global::ServerApp.IGetSecurityEventsQuery getSecurityEvents, global::ServerApp.IAuditLogoutMutation auditLogout, global::ServerApp.IAuditLoginMutation auditLogin, global::ServerApp.IGetUserClaimsQuery getUserClaims)
        {
            _getRoles = getRoles ?? throw new global::System.ArgumentNullException(nameof(getRoles));
            _assignRole = assignRole ?? throw new global::System.ArgumentNullException(nameof(assignRole));
            _getUsers = getUsers ?? throw new global::System.ArgumentNullException(nameof(getUsers));
            _getSecurityEvents = getSecurityEvents ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents));
            _auditLogout = auditLogout ?? throw new global::System.ArgumentNullException(nameof(auditLogout));
            _auditLogin = auditLogin ?? throw new global::System.ArgumentNullException(nameof(auditLogin));
            _getUserClaims = getUserClaims ?? throw new global::System.ArgumentNullException(nameof(getUserClaims));
        }

        public static global::System.String ClientName => "ServerClient";
        public global::ServerApp.IGetRolesQuery GetRoles => _getRoles;
        public global::ServerApp.IAssignRoleMutation AssignRole => _assignRole;
        public global::ServerApp.IGetUsersQuery GetUsers => _getUsers;
        public global::ServerApp.IGetSecurityEventsQuery GetSecurityEvents => _getSecurityEvents;
        public global::ServerApp.IAuditLogoutMutation AuditLogout => _auditLogout;
        public global::ServerApp.IAuditLoginMutation AuditLogin => _auditLogin;
        public global::ServerApp.IGetUserClaimsQuery GetUserClaims => _getUserClaims;
    }

    /// <summary>
    /// Represents the ServerClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial interface IServerClient
    {
        global::ServerApp.IGetRolesQuery GetRoles { get; }

        global::ServerApp.IAssignRoleMutation AssignRole { get; }

        global::ServerApp.IGetUsersQuery GetUsers { get; }

        global::ServerApp.IGetSecurityEventsQuery GetSecurityEvents { get; }

        global::ServerApp.IAuditLogoutMutation AuditLogout { get; }

        global::ServerApp.IAuditLoginMutation AuditLogin { get; }

        global::ServerApp.IGetUserClaimsQuery GetUserClaims { get; }
    }
}

namespace ServerApp.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class RolesEntity
    {
        public RolesEntity(global::System.Guid id = default !, global::System.String name = default !)
        {
            Id = id;
            Name = name;
        }

        public global::System.Guid Id { get; }
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class UserEntity
    {
        public UserEntity(global::System.Guid id = default !, global::System.String email = default !, global::StrawberryShake.EntityId role = default !, global::System.String externalId = default !)
        {
            Id = id;
            Email = email;
            Role = role;
            ExternalId = externalId;
        }

        public global::System.Guid Id { get; }
        public global::System.String Email { get; }
        public global::StrawberryShake.EntityId Role { get; }
        public global::System.String ExternalId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class SecurityEventsEntity
    {
        public SecurityEventsEntity(global::System.Guid id = default !, global::System.String eventType = default !, global::System.DateTimeOffset occurredUtc = default !, global::System.String? details = default !, global::StrawberryShake.EntityId authorUser = default !, global::StrawberryShake.EntityId affectedUser = default !)
        {
            Id = id;
            EventType = eventType;
            OccurredUtc = occurredUtc;
            Details = details;
            AuthorUser = authorUser;
            AffectedUser = affectedUser;
        }

        public global::System.Guid Id { get; }
        public global::System.String EventType { get; }
        public global::System.DateTimeOffset OccurredUtc { get; }
        public global::System.String? Details { get; }
        public global::StrawberryShake.EntityId AuthorUser { get; }
        public global::StrawberryShake.EntityId AffectedUser { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetRolesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.GetRolesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetRoles_Roles_Roles> _getRoles_Roles_RolesFromRolesEntityMapper;
        public GetRolesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetRoles_Roles_Roles> getRoles_Roles_RolesFromRolesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRoles_Roles_RolesFromRolesEntityMapper = getRoles_Roles_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRoles_Roles_RolesFromRolesEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ServerApp.IGetRolesResult);

        public GetRolesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetRolesResultInfo info)
            {
                return new GetRolesResult(MapNonNullableIGetRoles_RolesNonNullableArray(info.Roles, snapshot));
            }

            throw new global::System.ArgumentException("GetRolesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetRoles_Roles> MapNonNullableIGetRoles_RolesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var roless = new global::System.Collections.Generic.List<global::ServerApp.IGetRoles_Roles>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                roless.Add(MapNonNullableIGetRoles_Roles(child, snapshot));
            }

            return roless;
        }

        private global::ServerApp.IGetRoles_Roles MapNonNullableIGetRoles_Roles(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _getRoles_Roles_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetRolesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetRolesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> roles, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Roles = roles;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Roles { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetRolesResultInfo(Roles, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRoleResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.AssignRoleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, AssignRole_AssignUserRole_AuthorUser_User> _assignRole_AssignUserRole_AuthorUser_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, AssignRole_AssignUserRole_AuthorUser_Role_Roles> _assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, AssignRole_AssignUserRole_AffectedUser_User> _assignRole_AssignUserRole_AffectedUser_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, AssignRole_AssignUserRole_AffectedUser_Role_Roles> _assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper;
        public AssignRoleResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, AssignRole_AssignUserRole_AuthorUser_User> assignRole_AssignUserRole_AuthorUser_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, AssignRole_AssignUserRole_AuthorUser_Role_Roles> assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper, global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, AssignRole_AssignUserRole_AffectedUser_User> assignRole_AssignUserRole_AffectedUser_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, AssignRole_AssignUserRole_AffectedUser_Role_Roles> assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _assignRole_AssignUserRole_AuthorUser_UserFromUserEntityMapper = assignRole_AssignUserRole_AuthorUser_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(assignRole_AssignUserRole_AuthorUser_UserFromUserEntityMapper));
            _assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper = assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper));
            _assignRole_AssignUserRole_AffectedUser_UserFromUserEntityMapper = assignRole_AssignUserRole_AffectedUser_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(assignRole_AssignUserRole_AffectedUser_UserFromUserEntityMapper));
            _assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper = assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ServerApp.IAssignRoleResult);

        public AssignRoleResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AssignRoleResultInfo info)
            {
                return new AssignRoleResult(MapNonNullableIAssignRole_AssignUserRole(info.AssignUserRole, snapshot));
            }

            throw new global::System.ArgumentException("AssignRoleResultInfo expected.");
        }

        private global::ServerApp.IAssignRole_AssignUserRole MapNonNullableIAssignRole_AssignUserRole(global::ServerApp.State.AssignRoleResultData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAssignRole_AssignUserRole returnValue = default !;
            if (data.__typename.Equals("AssignRoleResult", global::System.StringComparison.Ordinal))
            {
                returnValue = new AssignRole_AssignUserRole_AssignRoleResult(data.FromRole ?? throw new global::System.ArgumentNullException(), data.ToRole ?? throw new global::System.ArgumentNullException(), MapNonNullableIAssignRole_AssignUserRole_AuthorUser(data.AuthorUser ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIAssignRole_AssignUserRole_AffectedUser(data.AffectedUser ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ServerApp.IAssignRole_AssignUserRole_AuthorUser MapNonNullableIAssignRole_AssignUserRole_AuthorUser(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _assignRole_AssignUserRole_AuthorUser_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.UserEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ServerApp.IAssignRole_AssignUserRole_AuthorUser_Role MapNonNullableIAssignRole_AssignUserRole_AuthorUser_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ServerApp.IAssignRole_AssignUserRole_AffectedUser MapNonNullableIAssignRole_AssignUserRole_AffectedUser(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _assignRole_AssignUserRole_AffectedUser_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.UserEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ServerApp.IAssignRole_AssignUserRole_AffectedUser_Role MapNonNullableIAssignRole_AssignUserRole_AffectedUser_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRoleResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AssignRoleResultInfo(global::ServerApp.State.AssignRoleResultData assignUserRole, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AssignUserRole = assignUserRole;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ServerApp.State.AssignRoleResultData AssignUserRole { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AssignRoleResultInfo(AssignUserRole, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUsersResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.GetUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetUsers_Users_User> _getUsers_Users_UserFromUserEntityMapper;
        public GetUsersResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetUsers_Users_User> getUsers_Users_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUsers_Users_UserFromUserEntityMapper = getUsers_Users_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUsers_Users_UserFromUserEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ServerApp.IGetUsersResult);

        public GetUsersResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUsersResultInfo info)
            {
                return new GetUsersResult(MapNonNullableIGetUsers_UsersNonNullableArray(info.Users, snapshot));
            }

            throw new global::System.ArgumentException("GetUsersResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetUsers_Users> MapNonNullableIGetUsers_UsersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var users = new global::System.Collections.Generic.List<global::ServerApp.IGetUsers_Users>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                users.Add(MapNonNullableIGetUsers_Users(child, snapshot));
            }

            return users;
        }

        private global::ServerApp.IGetUsers_Users MapNonNullableIGetUsers_Users(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getUsers_Users_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.UserEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUsersResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUsersResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> users, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Users = users;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Users { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUsersResultInfo(Users, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEventsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.GetSecurityEventsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.SecurityEventsEntity, GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents> _getSecurityEvents_SecurityEvents_Nodes_SecurityEventsFromSecurityEventsEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User> _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles> _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User> _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles> _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper;
        public GetSecurityEventsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ServerApp.State.SecurityEventsEntity, GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents> getSecurityEvents_SecurityEvents_Nodes_SecurityEventsFromSecurityEventsEntityMapper, global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User> getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles> getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper, global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User> getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles> getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSecurityEvents_SecurityEvents_Nodes_SecurityEventsFromSecurityEventsEntityMapper = getSecurityEvents_SecurityEvents_Nodes_SecurityEventsFromSecurityEventsEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_SecurityEventsFromSecurityEventsEntityMapper));
            _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper = getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper));
            _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper = getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper));
            _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper = getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper));
            _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper = getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ServerApp.IGetSecurityEventsResult);

        public GetSecurityEventsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSecurityEventsResultInfo info)
            {
                return new GetSecurityEventsResult(MapIGetSecurityEvents_SecurityEvents(info.SecurityEvents, snapshot));
            }

            throw new global::System.ArgumentException("GetSecurityEventsResultInfo expected.");
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents? MapIGetSecurityEvents_SecurityEvents(global::ServerApp.State.SecurityEventsConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetSecurityEvents_SecurityEvents returnValue = default !;
            if (data?.__typename.Equals("SecurityEventsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetSecurityEvents_SecurityEvents_SecurityEventsConnection(MapIGetSecurityEvents_SecurityEvents_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes>? MapIGetSecurityEvents_SecurityEvents_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var securityEventss = new global::System.Collections.Generic.List<global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                securityEventss.Add(MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes(child, snapshot));
            }

            return securityEventss;
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("SecurityEvents", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_SecurityEventsFromSecurityEventsEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.SecurityEventsEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUser(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.UserEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUser(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.UserEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEventsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetSecurityEventsResultInfo(global::ServerApp.State.SecurityEventsConnectionData? securityEvents, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SecurityEvents = securityEvents;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ServerApp.State.SecurityEventsConnectionData? SecurityEvents { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSecurityEventsResultInfo(SecurityEvents, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLogoutResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.AuditLogoutResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AuditLogoutResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ServerApp.IAuditLogoutResult);

        public AuditLogoutResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AuditLogoutResultInfo info)
            {
                return new AuditLogoutResult(info.AuditLogout);
            }

            throw new global::System.ArgumentException("AuditLogoutResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLogoutResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AuditLogoutResultInfo(global::System.String auditLogout, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AuditLogout = auditLogout;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String AuditLogout { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AuditLogoutResultInfo(AuditLogout, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLoginResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.AuditLoginResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AuditLoginResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ServerApp.IAuditLoginResult);

        public AuditLoginResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AuditLoginResultInfo info)
            {
                return new AuditLoginResult(info.AuditLogin);
            }

            throw new global::System.ArgumentException("AuditLoginResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLoginResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AuditLoginResultInfo(global::System.String auditLogin, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AuditLogin = auditLogin;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String AuditLogin { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AuditLoginResultInfo(AuditLogin, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUserClaimsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.GetUserClaimsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUserClaimsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ServerApp.IGetUserClaimsResult);

        public GetUserClaimsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetUserClaimsResultInfo info)
            {
                return new GetUserClaimsResult(MapNonNullableIGetUserClaims_UserClaimsNonNullableArray(info.UserClaims, snapshot));
            }

            throw new global::System.ArgumentException("GetUserClaimsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ServerApp.IGetUserClaims_UserClaims> MapNonNullableIGetUserClaims_UserClaimsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::ServerApp.State.ClaimDtoData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var claimDtos = new global::System.Collections.Generic.List<global::ServerApp.IGetUserClaims_UserClaims>();
            foreach (global::ServerApp.State.ClaimDtoData child in list)
            {
                claimDtos.Add(MapNonNullableIGetUserClaims_UserClaims(child, snapshot));
            }

            return claimDtos;
        }

        private global::ServerApp.IGetUserClaims_UserClaims MapNonNullableIGetUserClaims_UserClaims(global::ServerApp.State.ClaimDtoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetUserClaims_UserClaims returnValue = default !;
            if (data.__typename.Equals("ClaimDto", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetUserClaims_UserClaims_ClaimDto(data.Type ?? throw new global::System.ArgumentNullException(), data.Value ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUserClaimsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetUserClaimsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::ServerApp.State.ClaimDtoData> userClaims, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UserClaims = userClaims;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::ServerApp.State.ClaimDtoData> UserClaims { get; }
        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;

        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetUserClaimsResultInfo(UserClaims, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    internal interface IAuditDtoInputInfo
    {
        global::System.Boolean IsEmailSet { get; }

        global::System.Boolean IsExternalIdSet { get; }

        global::System.Boolean IsProviderSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetRolesBuilder : global::StrawberryShake.OperationResultBuilder<global::ServerApp.IGetRolesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetRolesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetRolesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetRolesResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> rolesId = default !;
            _entityStore.Update(session =>
            {
                rolesId = Update_NonNullableIGetRoles_RolesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roles"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetRolesResultInfo(rolesId, entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Update_NonNullableIGetRoles_RolesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var roless = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                roless.Add(Update_NonNullableIGetRoles_RolesEntity(session, child, entityIds));
            }

            return roless;
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetRoles_RolesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.RolesEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRoleBuilder : global::StrawberryShake.OperationResultBuilder<global::ServerApp.IAssignRoleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public AssignRoleBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAssignRoleResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAssignRoleResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::ServerApp.State.AssignRoleResultData assignUserRoleId = default !;
            _entityStore.Update(session =>
            {
                assignUserRoleId = Deserialize_NonNullableIAssignRole_AssignUserRole(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "assignUserRole"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new AssignRoleResultInfo(assignUserRoleId, entityIds, snapshot.Version);
        }

        private global::ServerApp.State.AssignRoleResultData Deserialize_NonNullableIAssignRole_AssignUserRole(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AssignRoleResult", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ServerApp.State.AssignRoleResultData(typename, fromRole: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fromRole")), toRole: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "toRole")), authorUser: Update_NonNullableIAssignRole_AssignUserRole_AuthorUserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorUser"), entityIds), affectedUser: Update_NonNullableIAssignRole_AssignUserRole_AffectedUserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "affectedUser"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId Update_NonNullableIAssignRole_AssignUserRole_AuthorUserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.UserEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Update_NonNullableIAssignRole_AssignUserRole_AuthorUser_RoleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role"), entityIds), entity.ExternalId));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.UserEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Update_NonNullableIAssignRole_AssignUserRole_AuthorUser_RoleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId Update_NonNullableIAssignRole_AssignUserRole_AuthorUser_RoleEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.RolesEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId Update_NonNullableIAssignRole_AssignUserRole_AffectedUserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.UserEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Update_NonNullableIAssignRole_AssignUserRole_AffectedUser_RoleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role"), entityIds), entity.ExternalId));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.UserEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Update_NonNullableIAssignRole_AssignUserRole_AffectedUser_RoleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId Update_NonNullableIAssignRole_AssignUserRole_AffectedUser_RoleEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.RolesEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUsersBuilder : global::StrawberryShake.OperationResultBuilder<global::ServerApp.IGetUsersResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetUsersBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetUsersResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetUsersResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> usersId = default !;
            _entityStore.Update(session =>
            {
                usersId = Update_NonNullableIGetUsers_UsersEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetUsersResultInfo(usersId, entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Update_NonNullableIGetUsers_UsersEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var users = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                users.Add(Update_NonNullableIGetUsers_UsersEntity(session, child, entityIds));
            }

            return users;
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetUsers_UsersEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.UserEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Update_NonNullableIGetUsers_Users_RoleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role"), entityIds), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "externalId"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.UserEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Update_NonNullableIGetUsers_Users_RoleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role"), entityIds), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "externalId"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetUsers_Users_RoleEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.RolesEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEventsBuilder : global::StrawberryShake.OperationResultBuilder<global::ServerApp.IGetSecurityEventsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetSecurityEventsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetSecurityEventsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetSecurityEventsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::ServerApp.State.SecurityEventsConnectionData? securityEventsId = default !;
            _entityStore.Update(session =>
            {
                securityEventsId = Deserialize_IGetSecurityEvents_SecurityEvents(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "securityEvents"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetSecurityEventsResultInfo(securityEventsId, entityIds, snapshot.Version);
        }

        private global::ServerApp.State.SecurityEventsConnectionData? Deserialize_IGetSecurityEvents_SecurityEvents(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SecurityEventsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ServerApp.State.SecurityEventsConnectionData(typename, nodes: Update_IGetSecurityEvents_SecurityEvents_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Update_IGetSecurityEvents_SecurityEvents_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var securityEventss = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                securityEventss.Add(Update_NonNullableIGetSecurityEvents_SecurityEvents_NodesEntity(session, child, entityIds));
            }

            return securityEventss;
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetSecurityEvents_SecurityEvents_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SecurityEvents", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.SecurityEventsEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.SecurityEventsEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eventType")), Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "occurredUtc")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details")), Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorUser"), entityIds), Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "affectedUser"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.SecurityEventsEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eventType")), Deserialize_NonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "occurredUtc")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "details")), Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "authorUser"), entityIds), Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUserEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "affectedUser"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid Deserialize_NonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset Deserialize_NonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.UserEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_RoleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role"), entityIds), entity.ExternalId));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.UserEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_RoleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_RoleEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.RolesEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(entity.Id, Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(default !, Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUserEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.UserEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_RoleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role"), entityIds), entity.ExternalId));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.UserEntity(Deserialize_NonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_RoleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_RoleEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::ServerApp.State.RolesEntity? entity))
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(entity.Id, Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::ServerApp.State.RolesEntity(default !, Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLogoutBuilder : global::StrawberryShake.OperationResultBuilder<global::ServerApp.IAuditLogoutResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public AuditLogoutBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAuditLogoutResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAuditLogoutResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new AuditLogoutResultInfo(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "auditLogout")), entityIds, snapshot.Version);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AuditLoginBuilder : global::StrawberryShake.OperationResultBuilder<global::ServerApp.IAuditLoginResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public AuditLoginBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAuditLoginResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IAuditLoginResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new AuditLoginResultInfo(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "auditLogin")), entityIds, snapshot.Version);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUserClaimsBuilder : global::StrawberryShake.OperationResultBuilder<global::ServerApp.IGetUserClaimsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetUserClaimsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetUserClaimsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ServerApp.IGetUserClaimsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetUserClaimsResultInfo(Deserialize_NonNullableIGetUserClaims_UserClaimsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userClaims")), entityIds, snapshot.Version);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ServerApp.State.ClaimDtoData> Deserialize_NonNullableIGetUserClaims_UserClaimsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var claimDtos = new global::System.Collections.Generic.List<global::ServerApp.State.ClaimDtoData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                claimDtos.Add(Deserialize_NonNullableIGetUserClaims_UserClaims(child));
            }

            return claimDtos;
        }

        private global::ServerApp.State.ClaimDtoData Deserialize_NonNullableIGetUserClaims_UserClaims(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ClaimDto", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ServerApp.State.ClaimDtoData(typename, type: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), @value: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == global::System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRoleResultData
    {
        public AssignRoleResultData(global::System.String __typename, global::System.String? fromRole = default !, global::System.String? toRole = default !, global::StrawberryShake.EntityId? authorUser = default !, global::StrawberryShake.EntityId? affectedUser = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            FromRole = fromRole;
            ToRole = toRole;
            AuthorUser = authorUser;
            AffectedUser = affectedUser;
        }

        public global::System.String __typename { get; }
        public global::System.String? FromRole { get; }
        public global::System.String? ToRole { get; }
        public global::StrawberryShake.EntityId? AuthorUser { get; }
        public global::StrawberryShake.EntityId? AffectedUser { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class SecurityEventsConnectionData
    {
        public SecurityEventsConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }
        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class ClaimDtoData
    {
        public ClaimDtoData(global::System.String __typename, global::System.String? type = default !, global::System.String? @value = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Type = type;
            Value = @value;
        }

        public global::System.String __typename { get; }
        public global::System.String? Type { get; }
        public global::System.String? Value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetRoles_Roles_RolesFromRolesEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetRoles_Roles_Roles>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRoles_Roles_RolesFromRolesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRoles_Roles_Roles Map(global::ServerApp.State.RolesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRoles_Roles_Roles(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRole_AssignUserRole_AuthorUser_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, AssignRole_AssignUserRole_AuthorUser_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, AssignRole_AssignUserRole_AuthorUser_Role_Roles> _assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper;
        public AssignRole_AssignUserRole_AuthorUser_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, AssignRole_AssignUserRole_AuthorUser_Role_Roles> assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper = assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper));
        }

        public AssignRole_AssignUserRole_AuthorUser_User Map(global::ServerApp.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AssignRole_AssignUserRole_AuthorUser_User(entity.Id, entity.Email, MapNonNullableIAssignRole_AssignUserRole_AuthorUser_Role(entity.Role, snapshot));
        }

        private global::ServerApp.IAssignRole_AssignUserRole_AuthorUser_Role MapNonNullableIAssignRole_AssignUserRole_AuthorUser_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _assignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRole_AssignUserRole_AffectedUser_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, AssignRole_AssignUserRole_AffectedUser_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, AssignRole_AssignUserRole_AffectedUser_Role_Roles> _assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper;
        public AssignRole_AssignUserRole_AffectedUser_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, AssignRole_AssignUserRole_AffectedUser_Role_Roles> assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper = assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper));
        }

        public AssignRole_AssignUserRole_AffectedUser_User Map(global::ServerApp.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AssignRole_AssignUserRole_AffectedUser_User(entity.Id, entity.Email, MapNonNullableIAssignRole_AssignUserRole_AffectedUser_Role(entity.Role, snapshot));
        }

        private global::ServerApp.IAssignRole_AssignUserRole_AffectedUser_Role MapNonNullableIAssignRole_AssignUserRole_AffectedUser_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _assignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, AssignRole_AssignUserRole_AuthorUser_Role_Roles>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AssignRole_AssignUserRole_AuthorUser_Role_RolesFromRolesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AssignRole_AssignUserRole_AuthorUser_Role_Roles Map(global::ServerApp.State.RolesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AssignRole_AssignUserRole_AuthorUser_Role_Roles(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class AssignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, AssignRole_AssignUserRole_AffectedUser_Role_Roles>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AssignRole_AssignUserRole_AffectedUser_Role_RolesFromRolesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public AssignRole_AssignUserRole_AffectedUser_Role_Roles Map(global::ServerApp.State.RolesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new AssignRole_AssignUserRole_AffectedUser_Role_Roles(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUsers_Users_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetUsers_Users_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetUsers_Users_Role_Roles> _getUsers_Users_Role_RolesFromRolesEntityMapper;
        public GetUsers_Users_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetUsers_Users_Role_Roles> getUsers_Users_Role_RolesFromRolesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getUsers_Users_Role_RolesFromRolesEntityMapper = getUsers_Users_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getUsers_Users_Role_RolesFromRolesEntityMapper));
        }

        public GetUsers_Users_User Map(global::ServerApp.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUsers_Users_User(entity.Id, entity.Email, entity.ExternalId, MapNonNullableIGetUsers_Users_Role(entity.Role, snapshot));
        }

        private global::ServerApp.IGetUsers_Users_Role MapNonNullableIGetUsers_Users_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _getUsers_Users_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetUsers_Users_Role_RolesFromRolesEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetUsers_Users_Role_Roles>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetUsers_Users_Role_RolesFromRolesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetUsers_Users_Role_Roles Map(global::ServerApp.State.RolesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetUsers_Users_Role_Roles(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_Nodes_SecurityEventsFromSecurityEventsEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.SecurityEventsEntity, GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User> _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles> _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User> _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles> _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper;
        public GetSecurityEvents_SecurityEvents_Nodes_SecurityEventsFromSecurityEventsEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User> getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles> getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper, global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User> getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles> getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper = getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper));
            _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper = getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper));
            _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper = getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper));
            _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper = getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper));
        }

        public GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents Map(global::ServerApp.State.SecurityEventsEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSecurityEvents_SecurityEvents_Nodes_SecurityEvents(entity.Id, entity.EventType, entity.OccurredUtc, entity.Details, MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUser(entity.AuthorUser, snapshot), MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUser(entity.AffectedUser, snapshot));
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUser(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.UserEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUser(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.UserEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles> _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper;
        public GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles> getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper = getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper));
        }

        public GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User Map(global::ServerApp.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_User(entity.Id, entity.Email, MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role(entity.Role, snapshot));
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.UserEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles> _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper;
        public GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles> getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper = getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper));
        }

        public GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User Map(global::ServerApp.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_User(entity.Id, entity.Email, MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role(entity.Role, snapshot));
        }

        private global::ServerApp.IGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role MapNonNullableIGetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Roles", global::System.StringComparison.Ordinal))
            {
                return _getSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper.Map(snapshot.GetEntity<global::ServerApp.State.RolesEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_RolesFromRolesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles Map(global::ServerApp.State.RolesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSecurityEvents_SecurityEvents_Nodes_AuthorUser_Role_Roles(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper : global::StrawberryShake.IEntityMapper<global::ServerApp.State.RolesEntity, GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_RolesFromRolesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles Map(global::ServerApp.State.RolesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSecurityEvents_SecurityEvents_Nodes_AffectedUser_Role_Roles(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class ServerClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Roles" => ParseRolesEntityId(obj, __typename),
                "User" => ParseUserEntityId(obj, __typename),
                "SecurityEvents" => ParseSecurityEventsEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Roles" => FormatRolesEntityId(entityId),
                "User" => FormatUserEntityId(entityId),
                "SecurityEvents" => FormatSecurityEventsEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseRolesEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRolesEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSecurityEventsEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSecurityEventsEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "15.1.9.0")]
    public partial class ServerClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ServerClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
