schema {
  query: Query
  mutation: Mutation
}

type AssignRoleResult {
  authorUser: User!
  affectedUser: User!
  fromRole: String!
  toRole: String!
}

type ClaimDto {
  type: String!
  value: String!
}

type Claims {
  id: UUID!
  type: String!
  value: String!
  roleClaim: [RoleClaims!]!
}

type Mutation {
  assignUserRole(userId: UUID! roleId: UUID! authorUserId: UUID!): AssignRoleResult!
  auditLogin(input: AuditDtoInput!): String!
  auditLogout(input: AuditDtoInput!): String!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  users: [User!]!
  roles: [Roles!]!
  securityEvents("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SecurityEventsFilterInput order: [SecurityEventsSortInput!]): SecurityEventsConnection
  userClaims(externalId: String!): [ClaimDto!]!
}

type RoleClaims {
  roleId: UUID!
  role: Roles!
  claimId: UUID!
  claim: Claims!
}

type Roles {
  id: UUID!
  name: String!
  description: String
  users: [User!]!
  roleClaim: [RoleClaims!]!
}

type SecurityEvents {
  id: UUID!
  eventType: String!
  occurredUtc: DateTime!
  details: String
  authorUserId: UUID!
  authorUser: User!
  affectedUserId: UUID!
  affectedUser: User!
}

"A connection to a list of items."
type SecurityEventsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SecurityEventsEdge!]
  "A flattened list of the nodes."
  nodes: [SecurityEvents!]
}

"An edge in a connection."
type SecurityEventsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SecurityEvents!
}

type User {
  id: UUID!
  externalId: String!
  email: String!
  roleId: UUID!
  role: Roles!
  authoredEvents: [SecurityEvents!]!
  affectedEvents: [SecurityEvents!]!
}

input AuditDtoInput {
  email: String!
  externalId: String!
  provider: String
}

input ClaimsFilterInput {
  and: [ClaimsFilterInput!]
  or: [ClaimsFilterInput!]
  id: UuidOperationFilterInput
  type: StringOperationFilterInput
  value: StringOperationFilterInput
  roleClaim: ListFilterInputTypeOfRoleClaimsFilterInput
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ListFilterInputTypeOfRoleClaimsFilterInput {
  all: RoleClaimsFilterInput
  none: RoleClaimsFilterInput
  some: RoleClaimsFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSecurityEventsFilterInput {
  all: SecurityEventsFilterInput
  none: SecurityEventsFilterInput
  some: SecurityEventsFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserFilterInput {
  all: UserFilterInput
  none: UserFilterInput
  some: UserFilterInput
  any: Boolean
}

input RoleClaimsFilterInput {
  and: [RoleClaimsFilterInput!]
  or: [RoleClaimsFilterInput!]
  roleId: UuidOperationFilterInput
  role: RolesFilterInput
  claimId: UuidOperationFilterInput
  claim: ClaimsFilterInput
}

input RolesFilterInput {
  and: [RolesFilterInput!]
  or: [RolesFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  users: ListFilterInputTypeOfUserFilterInput
  roleClaim: ListFilterInputTypeOfRoleClaimsFilterInput
}

input RolesSortInput {
  id: SortEnumType
  name: SortEnumType
  description: SortEnumType
}

input SecurityEventsFilterInput {
  and: [SecurityEventsFilterInput!]
  or: [SecurityEventsFilterInput!]
  id: UuidOperationFilterInput
  eventType: StringOperationFilterInput
  occurredUtc: DateTimeOperationFilterInput
  details: StringOperationFilterInput
  authorUserId: UuidOperationFilterInput
  authorUser: UserFilterInput
  affectedUserId: UuidOperationFilterInput
  affectedUser: UserFilterInput
}

input SecurityEventsSortInput {
  id: SortEnumType
  eventType: SortEnumType
  occurredUtc: SortEnumType
  details: SortEnumType
  authorUserId: SortEnumType
  authorUser: UserSortInput
  affectedUserId: SortEnumType
  affectedUser: UserSortInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: UuidOperationFilterInput
  externalId: StringOperationFilterInput
  email: StringOperationFilterInput
  roleId: UuidOperationFilterInput
  role: RolesFilterInput
  authoredEvents: ListFilterInputTypeOfSecurityEventsFilterInput
  affectedEvents: ListFilterInputTypeOfSecurityEventsFilterInput
}

input UserSortInput {
  id: SortEnumType
  externalId: SortEnumType
  email: SortEnumType
  roleId: SortEnumType
  role: RolesSortInput
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum SortEnumType {
  ASC
  DESC
}

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
