// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Claims", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75580ddc-c512-4d6c-bcb0-37b7774cc3fd"),
                            Type = "permissions",
                            Value = "Audit.ViewAuthEvents"
                        },
                        new
                        {
                            Id = new Guid("124562f9-09d6-4b92-8f90-67b4b301311d"),
                            Type = "permissions",
                            Value = "Audit.RoleChanges"
                        });
                });

            modelBuilder.Entity("Data.Entities.SecurityEvents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AffectedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AffectedUserId");

                    b.HasIndex("AuthorUserId");

                    b.ToTable("SecurityEvents");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleClaims", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("RoleClaims");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("7d501146-c6b7-49b9-9304-c885caad56ba"),
                            ClaimId = new Guid("75580ddc-c512-4d6c-bcb0-37b7774cc3fd")
                        },
                        new
                        {
                            RoleId = new Guid("9ea85afc-083f-438d-89ba-d3a33bcd40ea"),
                            ClaimId = new Guid("75580ddc-c512-4d6c-bcb0-37b7774cc3fd")
                        },
                        new
                        {
                            RoleId = new Guid("9ea85afc-083f-438d-89ba-d3a33bcd40ea"),
                            ClaimId = new Guid("124562f9-09d6-4b92-8f90-67b4b301311d")
                        });
                });

            modelBuilder.Entity("Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5c83877-ec0e-4ee0-9666-3e355702b55a"),
                            Description = "Default role for new users",
                            Name = "BasicUser"
                        },
                        new
                        {
                            Id = new Guid("7d501146-c6b7-49b9-9304-c885caad56ba"),
                            Description = "Can view authentication events",
                            Name = "AuthObserver"
                        },
                        new
                        {
                            Id = new Guid("9ea85afc-083f-438d-89ba-d3a33bcd40ea"),
                            Description = "Can view auth events & role changes",
                            Name = "SecurityAuditor"
                        });
                });

            modelBuilder.Entity("Data.Entities.SecurityEvents", b =>
                {
                    b.HasOne("Data.Entities.User", "AffectedUser")
                        .WithMany("AffectedEvents")
                        .HasForeignKey("AffectedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "AuthorUser")
                        .WithMany("AuthoredEvents")
                        .HasForeignKey("AuthorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AffectedUser");

                    b.Navigation("AuthorUser");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasOne("Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoleClaims", b =>
                {
                    b.HasOne("Data.Entities.Claims", "Claim")
                        .WithMany("RoleClaim")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roles", "Role")
                        .WithMany("RoleClaim")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Entities.Claims", b =>
                {
                    b.Navigation("RoleClaim");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("AffectedEvents");

                    b.Navigation("AuthoredEvents");
                });

            modelBuilder.Entity("Roles", b =>
                {
                    b.Navigation("RoleClaim");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
